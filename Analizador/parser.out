Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    Comentario
    False
    True
    diferenteQue
    dividido
    dobleIgual
    llaveA
    llaveC
    mas
    mayorQue
    menorQue
    menos
    parA
    parC
    por

Grammar

Rule 0     S' -> init
Rule 1     init -> INSTRUCCIONES
Rule 2     INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION
Rule 3     INSTRUCCIONES -> INSTRUCCION
Rule 4     INSTRUCCION -> DECLARACION
Rule 5     DECLARACION -> Let Id igual EXPRESION ptComa
Rule 6     DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa
Rule 7     DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa
Rule 8     DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa
Rule 9     DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa
Rule 10    DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa
Rule 11    DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa
Rule 12    DECLARACION -> Let Mut Id igual EXPRESION ptComa
Rule 13    DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa
Rule 14    DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa
Rule 15    DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa
Rule 16    DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa
Rule 17    DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa
Rule 18    DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa
Rule 19    INSTRUCCION -> ASIGNACION
Rule 20    ASIGNACION -> Id igual EXPRESION ptComa
Rule 21    EXPRESION -> Float
Rule 22    EXPRESION -> Entero
Rule 23    EXPRESION -> Booleano
Rule 24    EXPRESION -> String
Rule 25    EXPRESION -> Char

Terminals, with rules where they appear

Bool                 : 10 17
Booleano             : 23
Char                 : 25
CharAux              : 11 18
Comentario           : 
Entero               : 22
F64                  : 7 14
False                : 
Float                : 21
I64                  : 6 13
Id                   : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20
Let                  : 5 6 7 8 9 10 11 12 13 14 15 16 17 18
Mut                  : 12 13 14 15 16 17 18
Str                  : 8 15
StrA                 : 9 16
String               : 24
True                 : 
diferenteQue         : 
dividido             : 
dobleIgual           : 
dosPuntos            : 6 7 8 9 10 11 13 14 15 16 17 18
error                : 
igual                : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20
llaveA               : 
llaveC               : 
mas                  : 
mayorQue             : 
menorQue             : 
menos                : 
parA                 : 
parC                 : 
por                  : 
ptComa               : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20

Nonterminals, with rules where they appear

ASIGNACION           : 19
DECLARACION          : 4
EXPRESION            : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20
INSTRUCCION          : 2 3
INSTRUCCIONES        : 1 2
init                 : 0

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . INSTRUCCIONES
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCION
    (3) INSTRUCCIONES -> . INSTRUCCION
    (4) INSTRUCCION -> . DECLARACION
    (19) INSTRUCCION -> . ASIGNACION
    (5) DECLARACION -> . Let Id igual EXPRESION ptComa
    (6) DECLARACION -> . Let Id dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> . Let Id dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> . Let Id dosPuntos Str igual EXPRESION ptComa
    (9) DECLARACION -> . Let Id dosPuntos StrA igual EXPRESION ptComa
    (10) DECLARACION -> . Let Id dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> . Let Id dosPuntos CharAux igual EXPRESION ptComa
    (12) DECLARACION -> . Let Mut Id igual EXPRESION ptComa
    (13) DECLARACION -> . Let Mut Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> . Let Mut Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> . Let Mut Id dosPuntos Str igual EXPRESION ptComa
    (16) DECLARACION -> . Let Mut Id dosPuntos StrA igual EXPRESION ptComa
    (17) DECLARACION -> . Let Mut Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> . Let Mut Id dosPuntos CharAux igual EXPRESION ptComa
    (20) ASIGNACION -> . Id igual EXPRESION ptComa

    Let             shift and go to state 6
    Id              shift and go to state 7

    init                           shift and go to state 1
    INSTRUCCIONES                  shift and go to state 2
    INSTRUCCION                    shift and go to state 3
    DECLARACION                    shift and go to state 4
    ASIGNACION                     shift and go to state 5

state 1

    (0) S' -> init .



state 2

    (1) init -> INSTRUCCIONES .
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCION
    (4) INSTRUCCION -> . DECLARACION
    (19) INSTRUCCION -> . ASIGNACION
    (5) DECLARACION -> . Let Id igual EXPRESION ptComa
    (6) DECLARACION -> . Let Id dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> . Let Id dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> . Let Id dosPuntos Str igual EXPRESION ptComa
    (9) DECLARACION -> . Let Id dosPuntos StrA igual EXPRESION ptComa
    (10) DECLARACION -> . Let Id dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> . Let Id dosPuntos CharAux igual EXPRESION ptComa
    (12) DECLARACION -> . Let Mut Id igual EXPRESION ptComa
    (13) DECLARACION -> . Let Mut Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> . Let Mut Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> . Let Mut Id dosPuntos Str igual EXPRESION ptComa
    (16) DECLARACION -> . Let Mut Id dosPuntos StrA igual EXPRESION ptComa
    (17) DECLARACION -> . Let Mut Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> . Let Mut Id dosPuntos CharAux igual EXPRESION ptComa
    (20) ASIGNACION -> . Id igual EXPRESION ptComa

    $end            reduce using rule 1 (init -> INSTRUCCIONES .)
    Let             shift and go to state 6
    Id              shift and go to state 7

    INSTRUCCION                    shift and go to state 8
    DECLARACION                    shift and go to state 4
    ASIGNACION                     shift and go to state 5

state 3

    (3) INSTRUCCIONES -> INSTRUCCION .

    Let             reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    Id              reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    $end            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)


state 4

    (4) INSTRUCCION -> DECLARACION .

    Let             reduce using rule 4 (INSTRUCCION -> DECLARACION .)
    Id              reduce using rule 4 (INSTRUCCION -> DECLARACION .)
    $end            reduce using rule 4 (INSTRUCCION -> DECLARACION .)


state 5

    (19) INSTRUCCION -> ASIGNACION .

    Let             reduce using rule 19 (INSTRUCCION -> ASIGNACION .)
    Id              reduce using rule 19 (INSTRUCCION -> ASIGNACION .)
    $end            reduce using rule 19 (INSTRUCCION -> ASIGNACION .)


state 6

    (5) DECLARACION -> Let . Id igual EXPRESION ptComa
    (6) DECLARACION -> Let . Id dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> Let . Id dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> Let . Id dosPuntos Str igual EXPRESION ptComa
    (9) DECLARACION -> Let . Id dosPuntos StrA igual EXPRESION ptComa
    (10) DECLARACION -> Let . Id dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> Let . Id dosPuntos CharAux igual EXPRESION ptComa
    (12) DECLARACION -> Let . Mut Id igual EXPRESION ptComa
    (13) DECLARACION -> Let . Mut Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let . Mut Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let . Mut Id dosPuntos Str igual EXPRESION ptComa
    (16) DECLARACION -> Let . Mut Id dosPuntos StrA igual EXPRESION ptComa
    (17) DECLARACION -> Let . Mut Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let . Mut Id dosPuntos CharAux igual EXPRESION ptComa

    Id              shift and go to state 9
    Mut             shift and go to state 10


state 7

    (20) ASIGNACION -> Id . igual EXPRESION ptComa

    igual           shift and go to state 11


state 8

    (2) INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .

    Let             reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    Id              reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    $end            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)


state 9

    (5) DECLARACION -> Let Id . igual EXPRESION ptComa
    (6) DECLARACION -> Let Id . dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> Let Id . dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> Let Id . dosPuntos Str igual EXPRESION ptComa
    (9) DECLARACION -> Let Id . dosPuntos StrA igual EXPRESION ptComa
    (10) DECLARACION -> Let Id . dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> Let Id . dosPuntos CharAux igual EXPRESION ptComa

    igual           shift and go to state 12
    dosPuntos       shift and go to state 13


state 10

    (12) DECLARACION -> Let Mut . Id igual EXPRESION ptComa
    (13) DECLARACION -> Let Mut . Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let Mut . Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let Mut . Id dosPuntos Str igual EXPRESION ptComa
    (16) DECLARACION -> Let Mut . Id dosPuntos StrA igual EXPRESION ptComa
    (17) DECLARACION -> Let Mut . Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let Mut . Id dosPuntos CharAux igual EXPRESION ptComa

    Id              shift and go to state 14


state 11

    (20) ASIGNACION -> Id igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 15

state 12

    (5) DECLARACION -> Let Id igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 21

state 13

    (6) DECLARACION -> Let Id dosPuntos . I64 igual EXPRESION ptComa
    (7) DECLARACION -> Let Id dosPuntos . F64 igual EXPRESION ptComa
    (8) DECLARACION -> Let Id dosPuntos . Str igual EXPRESION ptComa
    (9) DECLARACION -> Let Id dosPuntos . StrA igual EXPRESION ptComa
    (10) DECLARACION -> Let Id dosPuntos . Bool igual EXPRESION ptComa
    (11) DECLARACION -> Let Id dosPuntos . CharAux igual EXPRESION ptComa

    I64             shift and go to state 22
    F64             shift and go to state 23
    Str             shift and go to state 24
    StrA            shift and go to state 25
    Bool            shift and go to state 26
    CharAux         shift and go to state 27


state 14

    (12) DECLARACION -> Let Mut Id . igual EXPRESION ptComa
    (13) DECLARACION -> Let Mut Id . dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let Mut Id . dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let Mut Id . dosPuntos Str igual EXPRESION ptComa
    (16) DECLARACION -> Let Mut Id . dosPuntos StrA igual EXPRESION ptComa
    (17) DECLARACION -> Let Mut Id . dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let Mut Id . dosPuntos CharAux igual EXPRESION ptComa

    igual           shift and go to state 28
    dosPuntos       shift and go to state 29


state 15

    (20) ASIGNACION -> Id igual EXPRESION . ptComa

    ptComa          shift and go to state 30


state 16

    (21) EXPRESION -> Float .

    ptComa          reduce using rule 21 (EXPRESION -> Float .)


state 17

    (22) EXPRESION -> Entero .

    ptComa          reduce using rule 22 (EXPRESION -> Entero .)


state 18

    (23) EXPRESION -> Booleano .

    ptComa          reduce using rule 23 (EXPRESION -> Booleano .)


state 19

    (24) EXPRESION -> String .

    ptComa          reduce using rule 24 (EXPRESION -> String .)


state 20

    (25) EXPRESION -> Char .

    ptComa          reduce using rule 25 (EXPRESION -> Char .)


state 21

    (5) DECLARACION -> Let Id igual EXPRESION . ptComa

    ptComa          shift and go to state 31


state 22

    (6) DECLARACION -> Let Id dosPuntos I64 . igual EXPRESION ptComa

    igual           shift and go to state 32


state 23

    (7) DECLARACION -> Let Id dosPuntos F64 . igual EXPRESION ptComa

    igual           shift and go to state 33


state 24

    (8) DECLARACION -> Let Id dosPuntos Str . igual EXPRESION ptComa

    igual           shift and go to state 34


state 25

    (9) DECLARACION -> Let Id dosPuntos StrA . igual EXPRESION ptComa

    igual           shift and go to state 35


state 26

    (10) DECLARACION -> Let Id dosPuntos Bool . igual EXPRESION ptComa

    igual           shift and go to state 36


state 27

    (11) DECLARACION -> Let Id dosPuntos CharAux . igual EXPRESION ptComa

    igual           shift and go to state 37


state 28

    (12) DECLARACION -> Let Mut Id igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 38

state 29

    (13) DECLARACION -> Let Mut Id dosPuntos . I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let Mut Id dosPuntos . F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let Mut Id dosPuntos . Str igual EXPRESION ptComa
    (16) DECLARACION -> Let Mut Id dosPuntos . StrA igual EXPRESION ptComa
    (17) DECLARACION -> Let Mut Id dosPuntos . Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let Mut Id dosPuntos . CharAux igual EXPRESION ptComa

    I64             shift and go to state 39
    F64             shift and go to state 40
    Str             shift and go to state 41
    StrA            shift and go to state 42
    Bool            shift and go to state 43
    CharAux         shift and go to state 44


state 30

    (20) ASIGNACION -> Id igual EXPRESION ptComa .

    Let             reduce using rule 20 (ASIGNACION -> Id igual EXPRESION ptComa .)
    Id              reduce using rule 20 (ASIGNACION -> Id igual EXPRESION ptComa .)
    $end            reduce using rule 20 (ASIGNACION -> Id igual EXPRESION ptComa .)


state 31

    (5) DECLARACION -> Let Id igual EXPRESION ptComa .

    Let             reduce using rule 5 (DECLARACION -> Let Id igual EXPRESION ptComa .)
    Id              reduce using rule 5 (DECLARACION -> Let Id igual EXPRESION ptComa .)
    $end            reduce using rule 5 (DECLARACION -> Let Id igual EXPRESION ptComa .)


state 32

    (6) DECLARACION -> Let Id dosPuntos I64 igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 45

state 33

    (7) DECLARACION -> Let Id dosPuntos F64 igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 46

state 34

    (8) DECLARACION -> Let Id dosPuntos Str igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 47

state 35

    (9) DECLARACION -> Let Id dosPuntos StrA igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 48

state 36

    (10) DECLARACION -> Let Id dosPuntos Bool igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 49

state 37

    (11) DECLARACION -> Let Id dosPuntos CharAux igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 50

state 38

    (12) DECLARACION -> Let Mut Id igual EXPRESION . ptComa

    ptComa          shift and go to state 51


state 39

    (13) DECLARACION -> Let Mut Id dosPuntos I64 . igual EXPRESION ptComa

    igual           shift and go to state 52


state 40

    (14) DECLARACION -> Let Mut Id dosPuntos F64 . igual EXPRESION ptComa

    igual           shift and go to state 53


state 41

    (15) DECLARACION -> Let Mut Id dosPuntos Str . igual EXPRESION ptComa

    igual           shift and go to state 54


state 42

    (16) DECLARACION -> Let Mut Id dosPuntos StrA . igual EXPRESION ptComa

    igual           shift and go to state 55


state 43

    (17) DECLARACION -> Let Mut Id dosPuntos Bool . igual EXPRESION ptComa

    igual           shift and go to state 56


state 44

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux . igual EXPRESION ptComa

    igual           shift and go to state 57


state 45

    (6) DECLARACION -> Let Id dosPuntos I64 igual EXPRESION . ptComa

    ptComa          shift and go to state 58


state 46

    (7) DECLARACION -> Let Id dosPuntos F64 igual EXPRESION . ptComa

    ptComa          shift and go to state 59


state 47

    (8) DECLARACION -> Let Id dosPuntos Str igual EXPRESION . ptComa

    ptComa          shift and go to state 60


state 48

    (9) DECLARACION -> Let Id dosPuntos StrA igual EXPRESION . ptComa

    ptComa          shift and go to state 61


state 49

    (10) DECLARACION -> Let Id dosPuntos Bool igual EXPRESION . ptComa

    ptComa          shift and go to state 62


state 50

    (11) DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION . ptComa

    ptComa          shift and go to state 63


state 51

    (12) DECLARACION -> Let Mut Id igual EXPRESION ptComa .

    Let             reduce using rule 12 (DECLARACION -> Let Mut Id igual EXPRESION ptComa .)
    Id              reduce using rule 12 (DECLARACION -> Let Mut Id igual EXPRESION ptComa .)
    $end            reduce using rule 12 (DECLARACION -> Let Mut Id igual EXPRESION ptComa .)


state 52

    (13) DECLARACION -> Let Mut Id dosPuntos I64 igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 64

state 53

    (14) DECLARACION -> Let Mut Id dosPuntos F64 igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 65

state 54

    (15) DECLARACION -> Let Mut Id dosPuntos Str igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 66

state 55

    (16) DECLARACION -> Let Mut Id dosPuntos StrA igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 67

state 56

    (17) DECLARACION -> Let Mut Id dosPuntos Bool igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 68

state 57

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux igual . EXPRESION ptComa
    (21) EXPRESION -> . Float
    (22) EXPRESION -> . Entero
    (23) EXPRESION -> . Booleano
    (24) EXPRESION -> . String
    (25) EXPRESION -> . Char

    Float           shift and go to state 16
    Entero          shift and go to state 17
    Booleano        shift and go to state 18
    String          shift and go to state 19
    Char            shift and go to state 20

    EXPRESION                      shift and go to state 69

state 58

    (6) DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .

    Let             reduce using rule 6 (DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .)
    Id              reduce using rule 6 (DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .)
    $end            reduce using rule 6 (DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .)


state 59

    (7) DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .

    Let             reduce using rule 7 (DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .)
    Id              reduce using rule 7 (DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .)
    $end            reduce using rule 7 (DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .)


state 60

    (8) DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .

    Let             reduce using rule 8 (DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .)
    Id              reduce using rule 8 (DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .)
    $end            reduce using rule 8 (DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .)


state 61

    (9) DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .

    Let             reduce using rule 9 (DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .)
    Id              reduce using rule 9 (DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .)
    $end            reduce using rule 9 (DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .)


state 62

    (10) DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .

    Let             reduce using rule 10 (DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .)
    Id              reduce using rule 10 (DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .)
    $end            reduce using rule 10 (DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .)


state 63

    (11) DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .

    Let             reduce using rule 11 (DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .)
    Id              reduce using rule 11 (DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .)
    $end            reduce using rule 11 (DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .)


state 64

    (13) DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION . ptComa

    ptComa          shift and go to state 70


state 65

    (14) DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION . ptComa

    ptComa          shift and go to state 71


state 66

    (15) DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION . ptComa

    ptComa          shift and go to state 72


state 67

    (16) DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION . ptComa

    ptComa          shift and go to state 73


state 68

    (17) DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION . ptComa

    ptComa          shift and go to state 74


state 69

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION . ptComa

    ptComa          shift and go to state 75


state 70

    (13) DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .

    Let             reduce using rule 13 (DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .)
    Id              reduce using rule 13 (DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .)
    $end            reduce using rule 13 (DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .)


state 71

    (14) DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .

    Let             reduce using rule 14 (DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .)
    Id              reduce using rule 14 (DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .)
    $end            reduce using rule 14 (DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .)


state 72

    (15) DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .

    Let             reduce using rule 15 (DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .)
    Id              reduce using rule 15 (DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .)
    $end            reduce using rule 15 (DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .)


state 73

    (16) DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .

    Let             reduce using rule 16 (DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .)
    Id              reduce using rule 16 (DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .)
    $end            reduce using rule 16 (DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .)


state 74

    (17) DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .

    Let             reduce using rule 17 (DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .)
    Id              reduce using rule 17 (DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .)
    $end            reduce using rule 17 (DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .)


state 75

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .

    Let             reduce using rule 18 (DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .)
    Id              reduce using rule 18 (DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .)
    $end            reduce using rule 18 (DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .)

