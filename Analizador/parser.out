Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    Comentario
    False
    True
    llaveA
    llaveC

Grammar

Rule 0     S' -> init
Rule 1     init -> INSTRUCCIONES
Rule 2     INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION
Rule 3     INSTRUCCIONES -> INSTRUCCION
Rule 4     INSTRUCCION -> DECLARACION
Rule 5     DECLARACION -> Let Id igual EXPRESION ptComa
Rule 6     DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa
Rule 7     DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa
Rule 8     DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa
Rule 9     DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa
Rule 10    DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa
Rule 11    DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa
Rule 12    DECLARACION -> Let Mut Id igual EXPRESION ptComa
Rule 13    DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa
Rule 14    DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa
Rule 15    DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa
Rule 16    DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa
Rule 17    DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa
Rule 18    DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa
Rule 19    DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 20    DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 21    DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 22    DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 23    DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 24    DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 25    DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 26    DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 27    DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 28    DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 29    DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 30    DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 31    DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 32    DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 33    DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 34    DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 35    DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 36    DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
Rule 37    DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 38    DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 39    DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 40    DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 41    DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 42    DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
Rule 43    INSTRUCCION -> ASIGNACION
Rule 44    ASIGNACION -> Id igual EXPRESION ptComa
Rule 45    ASIGNACION -> Id CorA EXPRESION CorC igual EXPRESION ptComa
Rule 46    INSTRUCCION -> PUSH
Rule 47    PUSH -> Id punto Push ParA EXPRESION ParC ptComa
Rule 48    INSTRUCCION -> INSERTVEC
Rule 49    INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa
Rule 50    INSTRUCCION -> IMPRIMIR
Rule 51    IMPRIMIR -> PrintLn not ParA String ParC ptComa
Rule 52    IMPRIMIR -> PrintLn not ParA String Coma COMASEX ParC ptComa
Rule 53    COMASEX -> COMASEX Coma EXPRESION
Rule 54    COMASEX -> EXPRESION
Rule 55    EXPRESION -> EXPRESION mas EXPRESION
Rule 56    EXPRESION -> EXPRESION menos EXPRESION
Rule 57    EXPRESION -> EXPRESION por EXPRESION
Rule 58    EXPRESION -> EXPRESION dividido EXPRESION
Rule 59    EXPRESION -> EXPRESION modulo EXPRESION
Rule 60    EXPRESION -> menos EXPRESION
Rule 61    EXPRESION -> ParA EXPRESION ParC
Rule 62    EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
Rule 63    EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
Rule 64    EXPRESION -> EXPRESION menorQue EXPRESION
Rule 65    EXPRESION -> EXPRESION mayorQue EXPRESION
Rule 66    EXPRESION -> EXPRESION menorIgual EXPRESION
Rule 67    EXPRESION -> EXPRESION mayorIgual EXPRESION
Rule 68    EXPRESION -> EXPRESION dobleIgual EXPRESION
Rule 69    EXPRESION -> EXPRESION diferenteQue EXPRESION
Rule 70    EXPRESION -> EXPRESION And EXPRESION
Rule 71    EXPRESION -> EXPRESION Or EXPRESION
Rule 72    EXPRESION -> not EXPRESION
Rule 73    EXPRESION -> EXPRESION AS I64
Rule 74    EXPRESION -> EXPRESION AS F64
Rule 75    EXPRESION -> vec not CorA COMASEX CorC
Rule 76    EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC
Rule 77    EXPRESION -> INSERTVEC
Rule 78    EXPRESION -> Id punto Remove ParA EXPRESION ParC
Rule 79    EXPRESION -> Float
Rule 80    EXPRESION -> Entero
Rule 81    EXPRESION -> Booleano
Rule 82    EXPRESION -> String
Rule 83    EXPRESION -> Char
Rule 84    EXPRESION -> Id
Rule 85    EXPRESION -> Id CorA EXPRESION CorC

Terminals, with rules where they appear

AS                   : 73 74
And                  : 70
Bool                 : 10 17 23 29 35 41
Booleano             : 81
Capacidad            : 25 26 27 28 29 30 37 38 39 40 41 42
Char                 : 83
CharAux              : 11 18 24 30 36 42
Coma                 : 49 52 53 62 63
Comentario           : 
CorA                 : 45 75 76 85
CorC                 : 45 75 76 85
Entero               : 80
F64                  : 7 14 20 26 32 38 63 74
False                : 
Float                : 79
I64                  : 6 13 19 25 31 37 62 73
Id                   : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 45 47 49 78 84 85
Insert               : 49
Let                  : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
Mut                  : 12 13 14 15 16 17 18 31 32 33 34 35 36 37 38 39 40 41 42
New                  : 19 20 21 22 23 24 31 32 33 34 35 36
Or                   : 71
ParA                 : 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 47 49 51 52 61 62 63 78
ParC                 : 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 47 49 51 52 61 62 63 78
Powf                 : 63
Powi                 : 62
PrintLn              : 51 52
Push                 : 47
Remove               : 78
Str                  : 9 16 22 28 34 40
StrA                 : 8 15 21 27 33 39
String               : 51 52 82
True                 : 
VEC                  : 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42
diferenteQue         : 69
dividido             : 58
dobleIgual           : 68
dosPuntos            : 6 7 8 9 10 11 13 14 15 16 17 18 19 19 19 20 20 20 21 21 21 22 22 22 23 23 23 24 24 24 25 25 25 26 26 26 27 27 27 28 28 28 29 29 29 30 30 30 31 31 31 32 32 32 33 33 33 34 34 34 35 35 35 36 36 36 37 37 37 38 38 38 39 39 39 40 40 40 41 41 41 42 42 42 62 62 63 63
error                : 
igual                : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 45
llaveA               : 
llaveC               : 
mas                  : 55
mayorIgual           : 67
mayorQue             : 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 65
menorIgual           : 66
menorQue             : 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 64
menos                : 56 60
modulo               : 59
not                  : 51 52 72 75 76
por                  : 57
ptComa               : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 45 47 49 51 52 76
punto                : 47 49 78
vec                  : 75 76

Nonterminals, with rules where they appear

ASIGNACION           : 43
COMASEX              : 52 53 75
DECLARACION          : 4
EXPRESION            : 5 6 7 8 9 10 11 12 13 14 15 16 17 18 25 26 27 28 29 30 37 38 39 40 41 42 44 45 45 47 49 49 53 54 55 55 56 56 57 57 58 58 59 59 60 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 73 74 76 76 78 85
IMPRIMIR             : 50
INSERTVEC            : 48 77
INSTRUCCION          : 2 3
INSTRUCCIONES        : 1 2
PUSH                 : 46
init                 : 0

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . INSTRUCCIONES
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCION
    (3) INSTRUCCIONES -> . INSTRUCCION
    (4) INSTRUCCION -> . DECLARACION
    (43) INSTRUCCION -> . ASIGNACION
    (46) INSTRUCCION -> . PUSH
    (48) INSTRUCCION -> . INSERTVEC
    (50) INSTRUCCION -> . IMPRIMIR
    (5) DECLARACION -> . Let Id igual EXPRESION ptComa
    (6) DECLARACION -> . Let Id dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> . Let Id dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> . Let Id dosPuntos StrA igual EXPRESION ptComa
    (9) DECLARACION -> . Let Id dosPuntos Str igual EXPRESION ptComa
    (10) DECLARACION -> . Let Id dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> . Let Id dosPuntos CharAux igual EXPRESION ptComa
    (12) DECLARACION -> . Let Mut Id igual EXPRESION ptComa
    (13) DECLARACION -> . Let Mut Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> . Let Mut Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> . Let Mut Id dosPuntos StrA igual EXPRESION ptComa
    (16) DECLARACION -> . Let Mut Id dosPuntos Str igual EXPRESION ptComa
    (17) DECLARACION -> . Let Mut Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> . Let Mut Id dosPuntos CharAux igual EXPRESION ptComa
    (19) DECLARACION -> . Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (20) DECLARACION -> . Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (21) DECLARACION -> . Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (22) DECLARACION -> . Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (23) DECLARACION -> . Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (24) DECLARACION -> . Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> . Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (26) DECLARACION -> . Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (27) DECLARACION -> . Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (28) DECLARACION -> . Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (29) DECLARACION -> . Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (30) DECLARACION -> . Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (31) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (44) ASIGNACION -> . Id igual EXPRESION ptComa
    (45) ASIGNACION -> . Id CorA EXPRESION CorC igual EXPRESION ptComa
    (47) PUSH -> . Id punto Push ParA EXPRESION ParC ptComa
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa
    (51) IMPRIMIR -> . PrintLn not ParA String ParC ptComa
    (52) IMPRIMIR -> . PrintLn not ParA String Coma COMASEX ParC ptComa

    Let             shift and go to state 9
    Id              shift and go to state 10
    PrintLn         shift and go to state 11

    init                           shift and go to state 1
    INSTRUCCIONES                  shift and go to state 2
    INSTRUCCION                    shift and go to state 3
    DECLARACION                    shift and go to state 4
    ASIGNACION                     shift and go to state 5
    PUSH                           shift and go to state 6
    INSERTVEC                      shift and go to state 7
    IMPRIMIR                       shift and go to state 8

state 1

    (0) S' -> init .



state 2

    (1) init -> INSTRUCCIONES .
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCION
    (4) INSTRUCCION -> . DECLARACION
    (43) INSTRUCCION -> . ASIGNACION
    (46) INSTRUCCION -> . PUSH
    (48) INSTRUCCION -> . INSERTVEC
    (50) INSTRUCCION -> . IMPRIMIR
    (5) DECLARACION -> . Let Id igual EXPRESION ptComa
    (6) DECLARACION -> . Let Id dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> . Let Id dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> . Let Id dosPuntos StrA igual EXPRESION ptComa
    (9) DECLARACION -> . Let Id dosPuntos Str igual EXPRESION ptComa
    (10) DECLARACION -> . Let Id dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> . Let Id dosPuntos CharAux igual EXPRESION ptComa
    (12) DECLARACION -> . Let Mut Id igual EXPRESION ptComa
    (13) DECLARACION -> . Let Mut Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> . Let Mut Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> . Let Mut Id dosPuntos StrA igual EXPRESION ptComa
    (16) DECLARACION -> . Let Mut Id dosPuntos Str igual EXPRESION ptComa
    (17) DECLARACION -> . Let Mut Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> . Let Mut Id dosPuntos CharAux igual EXPRESION ptComa
    (19) DECLARACION -> . Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (20) DECLARACION -> . Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (21) DECLARACION -> . Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (22) DECLARACION -> . Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (23) DECLARACION -> . Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (24) DECLARACION -> . Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> . Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (26) DECLARACION -> . Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (27) DECLARACION -> . Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (28) DECLARACION -> . Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (29) DECLARACION -> . Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (30) DECLARACION -> . Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (31) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> . Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (44) ASIGNACION -> . Id igual EXPRESION ptComa
    (45) ASIGNACION -> . Id CorA EXPRESION CorC igual EXPRESION ptComa
    (47) PUSH -> . Id punto Push ParA EXPRESION ParC ptComa
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa
    (51) IMPRIMIR -> . PrintLn not ParA String ParC ptComa
    (52) IMPRIMIR -> . PrintLn not ParA String Coma COMASEX ParC ptComa

    $end            reduce using rule 1 (init -> INSTRUCCIONES .)
    Let             shift and go to state 9
    Id              shift and go to state 10
    PrintLn         shift and go to state 11

    INSTRUCCION                    shift and go to state 12
    DECLARACION                    shift and go to state 4
    ASIGNACION                     shift and go to state 5
    PUSH                           shift and go to state 6
    INSERTVEC                      shift and go to state 7
    IMPRIMIR                       shift and go to state 8

state 3

    (3) INSTRUCCIONES -> INSTRUCCION .

    Let             reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    Id              reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    PrintLn         reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    $end            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)


state 4

    (4) INSTRUCCION -> DECLARACION .

    Let             reduce using rule 4 (INSTRUCCION -> DECLARACION .)
    Id              reduce using rule 4 (INSTRUCCION -> DECLARACION .)
    PrintLn         reduce using rule 4 (INSTRUCCION -> DECLARACION .)
    $end            reduce using rule 4 (INSTRUCCION -> DECLARACION .)


state 5

    (43) INSTRUCCION -> ASIGNACION .

    Let             reduce using rule 43 (INSTRUCCION -> ASIGNACION .)
    Id              reduce using rule 43 (INSTRUCCION -> ASIGNACION .)
    PrintLn         reduce using rule 43 (INSTRUCCION -> ASIGNACION .)
    $end            reduce using rule 43 (INSTRUCCION -> ASIGNACION .)


state 6

    (46) INSTRUCCION -> PUSH .

    Let             reduce using rule 46 (INSTRUCCION -> PUSH .)
    Id              reduce using rule 46 (INSTRUCCION -> PUSH .)
    PrintLn         reduce using rule 46 (INSTRUCCION -> PUSH .)
    $end            reduce using rule 46 (INSTRUCCION -> PUSH .)


state 7

    (48) INSTRUCCION -> INSERTVEC .

    Let             reduce using rule 48 (INSTRUCCION -> INSERTVEC .)
    Id              reduce using rule 48 (INSTRUCCION -> INSERTVEC .)
    PrintLn         reduce using rule 48 (INSTRUCCION -> INSERTVEC .)
    $end            reduce using rule 48 (INSTRUCCION -> INSERTVEC .)


state 8

    (50) INSTRUCCION -> IMPRIMIR .

    Let             reduce using rule 50 (INSTRUCCION -> IMPRIMIR .)
    Id              reduce using rule 50 (INSTRUCCION -> IMPRIMIR .)
    PrintLn         reduce using rule 50 (INSTRUCCION -> IMPRIMIR .)
    $end            reduce using rule 50 (INSTRUCCION -> IMPRIMIR .)


state 9

    (5) DECLARACION -> Let . Id igual EXPRESION ptComa
    (6) DECLARACION -> Let . Id dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> Let . Id dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> Let . Id dosPuntos StrA igual EXPRESION ptComa
    (9) DECLARACION -> Let . Id dosPuntos Str igual EXPRESION ptComa
    (10) DECLARACION -> Let . Id dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> Let . Id dosPuntos CharAux igual EXPRESION ptComa
    (12) DECLARACION -> Let . Mut Id igual EXPRESION ptComa
    (13) DECLARACION -> Let . Mut Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let . Mut Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let . Mut Id dosPuntos StrA igual EXPRESION ptComa
    (16) DECLARACION -> Let . Mut Id dosPuntos Str igual EXPRESION ptComa
    (17) DECLARACION -> Let . Mut Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let . Mut Id dosPuntos CharAux igual EXPRESION ptComa
    (19) DECLARACION -> Let . Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (20) DECLARACION -> Let . Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (21) DECLARACION -> Let . Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (22) DECLARACION -> Let . Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (23) DECLARACION -> Let . Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (24) DECLARACION -> Let . Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let . Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (26) DECLARACION -> Let . Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (27) DECLARACION -> Let . Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (28) DECLARACION -> Let . Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (29) DECLARACION -> Let . Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (30) DECLARACION -> Let . Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (31) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> Let . Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    Id              shift and go to state 13
    Mut             shift and go to state 14


state 10

    (44) ASIGNACION -> Id . igual EXPRESION ptComa
    (45) ASIGNACION -> Id . CorA EXPRESION CorC igual EXPRESION ptComa
    (47) PUSH -> Id . punto Push ParA EXPRESION ParC ptComa
    (49) INSERTVEC -> Id . punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    igual           shift and go to state 15
    CorA            shift and go to state 16
    punto           shift and go to state 17


state 11

    (51) IMPRIMIR -> PrintLn . not ParA String ParC ptComa
    (52) IMPRIMIR -> PrintLn . not ParA String Coma COMASEX ParC ptComa

    not             shift and go to state 18


state 12

    (2) INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .

    Let             reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    Id              reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    PrintLn         reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    $end            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)


state 13

    (5) DECLARACION -> Let Id . igual EXPRESION ptComa
    (6) DECLARACION -> Let Id . dosPuntos I64 igual EXPRESION ptComa
    (7) DECLARACION -> Let Id . dosPuntos F64 igual EXPRESION ptComa
    (8) DECLARACION -> Let Id . dosPuntos StrA igual EXPRESION ptComa
    (9) DECLARACION -> Let Id . dosPuntos Str igual EXPRESION ptComa
    (10) DECLARACION -> Let Id . dosPuntos Bool igual EXPRESION ptComa
    (11) DECLARACION -> Let Id . dosPuntos CharAux igual EXPRESION ptComa
    (19) DECLARACION -> Let Id . dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (20) DECLARACION -> Let Id . dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (21) DECLARACION -> Let Id . dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (22) DECLARACION -> Let Id . dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (23) DECLARACION -> Let Id . dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (24) DECLARACION -> Let Id . dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id . dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (26) DECLARACION -> Let Id . dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (27) DECLARACION -> Let Id . dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (28) DECLARACION -> Let Id . dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (29) DECLARACION -> Let Id . dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (30) DECLARACION -> Let Id . dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 19
    dosPuntos       shift and go to state 20


state 14

    (12) DECLARACION -> Let Mut . Id igual EXPRESION ptComa
    (13) DECLARACION -> Let Mut . Id dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let Mut . Id dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let Mut . Id dosPuntos StrA igual EXPRESION ptComa
    (16) DECLARACION -> Let Mut . Id dosPuntos Str igual EXPRESION ptComa
    (17) DECLARACION -> Let Mut . Id dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let Mut . Id dosPuntos CharAux igual EXPRESION ptComa
    (31) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> Let Mut . Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    Id              shift and go to state 21


state 15

    (44) ASIGNACION -> Id igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 23
    INSERTVEC                      shift and go to state 30

state 16

    (45) ASIGNACION -> Id CorA . EXPRESION CorC igual EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 36
    INSERTVEC                      shift and go to state 30

state 17

    (47) PUSH -> Id punto . Push ParA EXPRESION ParC ptComa
    (49) INSERTVEC -> Id punto . Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    Push            shift and go to state 37
    Insert          shift and go to state 38


state 18

    (51) IMPRIMIR -> PrintLn not . ParA String ParC ptComa
    (52) IMPRIMIR -> PrintLn not . ParA String Coma COMASEX ParC ptComa

    ParA            shift and go to state 39


state 19

    (5) DECLARACION -> Let Id igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 40
    INSERTVEC                      shift and go to state 30

state 20

    (6) DECLARACION -> Let Id dosPuntos . I64 igual EXPRESION ptComa
    (7) DECLARACION -> Let Id dosPuntos . F64 igual EXPRESION ptComa
    (8) DECLARACION -> Let Id dosPuntos . StrA igual EXPRESION ptComa
    (9) DECLARACION -> Let Id dosPuntos . Str igual EXPRESION ptComa
    (10) DECLARACION -> Let Id dosPuntos . Bool igual EXPRESION ptComa
    (11) DECLARACION -> Let Id dosPuntos . CharAux igual EXPRESION ptComa
    (19) DECLARACION -> Let Id dosPuntos . VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (20) DECLARACION -> Let Id dosPuntos . VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (21) DECLARACION -> Let Id dosPuntos . VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (22) DECLARACION -> Let Id dosPuntos . VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (23) DECLARACION -> Let Id dosPuntos . VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (24) DECLARACION -> Let Id dosPuntos . VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos . VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos . VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos . VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos . VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos . VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos . VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    I64             shift and go to state 41
    F64             shift and go to state 42
    StrA            shift and go to state 43
    Str             shift and go to state 44
    Bool            shift and go to state 45
    CharAux         shift and go to state 46
    VEC             shift and go to state 47


state 21

    (12) DECLARACION -> Let Mut Id . igual EXPRESION ptComa
    (13) DECLARACION -> Let Mut Id . dosPuntos I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let Mut Id . dosPuntos F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let Mut Id . dosPuntos StrA igual EXPRESION ptComa
    (16) DECLARACION -> Let Mut Id . dosPuntos Str igual EXPRESION ptComa
    (17) DECLARACION -> Let Mut Id . dosPuntos Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let Mut Id . dosPuntos CharAux igual EXPRESION ptComa
    (31) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> Let Mut Id . dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 48
    dosPuntos       shift and go to state 49


state 22

    (78) EXPRESION -> Id . punto Remove ParA EXPRESION ParC
    (84) EXPRESION -> Id .
    (85) EXPRESION -> Id . CorA EXPRESION CorC
    (49) INSERTVEC -> Id . punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    punto           shift and go to state 50
    ptComa          reduce using rule 84 (EXPRESION -> Id .)
    mas             reduce using rule 84 (EXPRESION -> Id .)
    menos           reduce using rule 84 (EXPRESION -> Id .)
    por             reduce using rule 84 (EXPRESION -> Id .)
    dividido        reduce using rule 84 (EXPRESION -> Id .)
    modulo          reduce using rule 84 (EXPRESION -> Id .)
    menorQue        reduce using rule 84 (EXPRESION -> Id .)
    mayorQue        reduce using rule 84 (EXPRESION -> Id .)
    menorIgual      reduce using rule 84 (EXPRESION -> Id .)
    mayorIgual      reduce using rule 84 (EXPRESION -> Id .)
    dobleIgual      reduce using rule 84 (EXPRESION -> Id .)
    diferenteQue    reduce using rule 84 (EXPRESION -> Id .)
    And             reduce using rule 84 (EXPRESION -> Id .)
    Or              reduce using rule 84 (EXPRESION -> Id .)
    AS              reduce using rule 84 (EXPRESION -> Id .)
    CorC            reduce using rule 84 (EXPRESION -> Id .)
    ParC            reduce using rule 84 (EXPRESION -> Id .)
    Coma            reduce using rule 84 (EXPRESION -> Id .)
    CorA            shift and go to state 51


state 23

    (44) ASIGNACION -> Id igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 52
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 24

    (60) EXPRESION -> menos . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 67
    INSERTVEC                      shift and go to state 30

state 25

    (61) EXPRESION -> ParA . EXPRESION ParC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 68
    INSERTVEC                      shift and go to state 30

state 26

    (62) EXPRESION -> I64 . dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC

    dosPuntos       shift and go to state 69


state 27

    (63) EXPRESION -> F64 . dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC

    dosPuntos       shift and go to state 70


state 28

    (72) EXPRESION -> not . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 71
    INSERTVEC                      shift and go to state 30

state 29

    (75) EXPRESION -> vec . not CorA COMASEX CorC
    (76) EXPRESION -> vec . not CorA EXPRESION ptComa EXPRESION CorC

    not             shift and go to state 72


state 30

    (77) EXPRESION -> INSERTVEC .

    ptComa          reduce using rule 77 (EXPRESION -> INSERTVEC .)
    mas             reduce using rule 77 (EXPRESION -> INSERTVEC .)
    menos           reduce using rule 77 (EXPRESION -> INSERTVEC .)
    por             reduce using rule 77 (EXPRESION -> INSERTVEC .)
    dividido        reduce using rule 77 (EXPRESION -> INSERTVEC .)
    modulo          reduce using rule 77 (EXPRESION -> INSERTVEC .)
    menorQue        reduce using rule 77 (EXPRESION -> INSERTVEC .)
    mayorQue        reduce using rule 77 (EXPRESION -> INSERTVEC .)
    menorIgual      reduce using rule 77 (EXPRESION -> INSERTVEC .)
    mayorIgual      reduce using rule 77 (EXPRESION -> INSERTVEC .)
    dobleIgual      reduce using rule 77 (EXPRESION -> INSERTVEC .)
    diferenteQue    reduce using rule 77 (EXPRESION -> INSERTVEC .)
    And             reduce using rule 77 (EXPRESION -> INSERTVEC .)
    Or              reduce using rule 77 (EXPRESION -> INSERTVEC .)
    AS              reduce using rule 77 (EXPRESION -> INSERTVEC .)
    CorC            reduce using rule 77 (EXPRESION -> INSERTVEC .)
    ParC            reduce using rule 77 (EXPRESION -> INSERTVEC .)
    Coma            reduce using rule 77 (EXPRESION -> INSERTVEC .)


state 31

    (79) EXPRESION -> Float .

    ptComa          reduce using rule 79 (EXPRESION -> Float .)
    mas             reduce using rule 79 (EXPRESION -> Float .)
    menos           reduce using rule 79 (EXPRESION -> Float .)
    por             reduce using rule 79 (EXPRESION -> Float .)
    dividido        reduce using rule 79 (EXPRESION -> Float .)
    modulo          reduce using rule 79 (EXPRESION -> Float .)
    menorQue        reduce using rule 79 (EXPRESION -> Float .)
    mayorQue        reduce using rule 79 (EXPRESION -> Float .)
    menorIgual      reduce using rule 79 (EXPRESION -> Float .)
    mayorIgual      reduce using rule 79 (EXPRESION -> Float .)
    dobleIgual      reduce using rule 79 (EXPRESION -> Float .)
    diferenteQue    reduce using rule 79 (EXPRESION -> Float .)
    And             reduce using rule 79 (EXPRESION -> Float .)
    Or              reduce using rule 79 (EXPRESION -> Float .)
    AS              reduce using rule 79 (EXPRESION -> Float .)
    CorC            reduce using rule 79 (EXPRESION -> Float .)
    ParC            reduce using rule 79 (EXPRESION -> Float .)
    Coma            reduce using rule 79 (EXPRESION -> Float .)


state 32

    (80) EXPRESION -> Entero .

    ptComa          reduce using rule 80 (EXPRESION -> Entero .)
    mas             reduce using rule 80 (EXPRESION -> Entero .)
    menos           reduce using rule 80 (EXPRESION -> Entero .)
    por             reduce using rule 80 (EXPRESION -> Entero .)
    dividido        reduce using rule 80 (EXPRESION -> Entero .)
    modulo          reduce using rule 80 (EXPRESION -> Entero .)
    menorQue        reduce using rule 80 (EXPRESION -> Entero .)
    mayorQue        reduce using rule 80 (EXPRESION -> Entero .)
    menorIgual      reduce using rule 80 (EXPRESION -> Entero .)
    mayorIgual      reduce using rule 80 (EXPRESION -> Entero .)
    dobleIgual      reduce using rule 80 (EXPRESION -> Entero .)
    diferenteQue    reduce using rule 80 (EXPRESION -> Entero .)
    And             reduce using rule 80 (EXPRESION -> Entero .)
    Or              reduce using rule 80 (EXPRESION -> Entero .)
    AS              reduce using rule 80 (EXPRESION -> Entero .)
    CorC            reduce using rule 80 (EXPRESION -> Entero .)
    ParC            reduce using rule 80 (EXPRESION -> Entero .)
    Coma            reduce using rule 80 (EXPRESION -> Entero .)


state 33

    (81) EXPRESION -> Booleano .

    ptComa          reduce using rule 81 (EXPRESION -> Booleano .)
    mas             reduce using rule 81 (EXPRESION -> Booleano .)
    menos           reduce using rule 81 (EXPRESION -> Booleano .)
    por             reduce using rule 81 (EXPRESION -> Booleano .)
    dividido        reduce using rule 81 (EXPRESION -> Booleano .)
    modulo          reduce using rule 81 (EXPRESION -> Booleano .)
    menorQue        reduce using rule 81 (EXPRESION -> Booleano .)
    mayorQue        reduce using rule 81 (EXPRESION -> Booleano .)
    menorIgual      reduce using rule 81 (EXPRESION -> Booleano .)
    mayorIgual      reduce using rule 81 (EXPRESION -> Booleano .)
    dobleIgual      reduce using rule 81 (EXPRESION -> Booleano .)
    diferenteQue    reduce using rule 81 (EXPRESION -> Booleano .)
    And             reduce using rule 81 (EXPRESION -> Booleano .)
    Or              reduce using rule 81 (EXPRESION -> Booleano .)
    AS              reduce using rule 81 (EXPRESION -> Booleano .)
    CorC            reduce using rule 81 (EXPRESION -> Booleano .)
    ParC            reduce using rule 81 (EXPRESION -> Booleano .)
    Coma            reduce using rule 81 (EXPRESION -> Booleano .)


state 34

    (82) EXPRESION -> String .

    ptComa          reduce using rule 82 (EXPRESION -> String .)
    mas             reduce using rule 82 (EXPRESION -> String .)
    menos           reduce using rule 82 (EXPRESION -> String .)
    por             reduce using rule 82 (EXPRESION -> String .)
    dividido        reduce using rule 82 (EXPRESION -> String .)
    modulo          reduce using rule 82 (EXPRESION -> String .)
    menorQue        reduce using rule 82 (EXPRESION -> String .)
    mayorQue        reduce using rule 82 (EXPRESION -> String .)
    menorIgual      reduce using rule 82 (EXPRESION -> String .)
    mayorIgual      reduce using rule 82 (EXPRESION -> String .)
    dobleIgual      reduce using rule 82 (EXPRESION -> String .)
    diferenteQue    reduce using rule 82 (EXPRESION -> String .)
    And             reduce using rule 82 (EXPRESION -> String .)
    Or              reduce using rule 82 (EXPRESION -> String .)
    AS              reduce using rule 82 (EXPRESION -> String .)
    CorC            reduce using rule 82 (EXPRESION -> String .)
    ParC            reduce using rule 82 (EXPRESION -> String .)
    Coma            reduce using rule 82 (EXPRESION -> String .)


state 35

    (83) EXPRESION -> Char .

    ptComa          reduce using rule 83 (EXPRESION -> Char .)
    mas             reduce using rule 83 (EXPRESION -> Char .)
    menos           reduce using rule 83 (EXPRESION -> Char .)
    por             reduce using rule 83 (EXPRESION -> Char .)
    dividido        reduce using rule 83 (EXPRESION -> Char .)
    modulo          reduce using rule 83 (EXPRESION -> Char .)
    menorQue        reduce using rule 83 (EXPRESION -> Char .)
    mayorQue        reduce using rule 83 (EXPRESION -> Char .)
    menorIgual      reduce using rule 83 (EXPRESION -> Char .)
    mayorIgual      reduce using rule 83 (EXPRESION -> Char .)
    dobleIgual      reduce using rule 83 (EXPRESION -> Char .)
    diferenteQue    reduce using rule 83 (EXPRESION -> Char .)
    And             reduce using rule 83 (EXPRESION -> Char .)
    Or              reduce using rule 83 (EXPRESION -> Char .)
    AS              reduce using rule 83 (EXPRESION -> Char .)
    CorC            reduce using rule 83 (EXPRESION -> Char .)
    ParC            reduce using rule 83 (EXPRESION -> Char .)
    Coma            reduce using rule 83 (EXPRESION -> Char .)


state 36

    (45) ASIGNACION -> Id CorA EXPRESION . CorC igual EXPRESION ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    CorC            shift and go to state 73
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 37

    (47) PUSH -> Id punto Push . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 74


state 38

    (49) INSERTVEC -> Id punto Insert . ParA EXPRESION Coma EXPRESION ParC ptComa

    ParA            shift and go to state 75


state 39

    (51) IMPRIMIR -> PrintLn not ParA . String ParC ptComa
    (52) IMPRIMIR -> PrintLn not ParA . String Coma COMASEX ParC ptComa

    String          shift and go to state 76


state 40

    (5) DECLARACION -> Let Id igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 77
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 41

    (6) DECLARACION -> Let Id dosPuntos I64 . igual EXPRESION ptComa

    igual           shift and go to state 78


state 42

    (7) DECLARACION -> Let Id dosPuntos F64 . igual EXPRESION ptComa

    igual           shift and go to state 79


state 43

    (8) DECLARACION -> Let Id dosPuntos StrA . igual EXPRESION ptComa

    igual           shift and go to state 80


state 44

    (9) DECLARACION -> Let Id dosPuntos Str . igual EXPRESION ptComa

    igual           shift and go to state 81


state 45

    (10) DECLARACION -> Let Id dosPuntos Bool . igual EXPRESION ptComa

    igual           shift and go to state 82


state 46

    (11) DECLARACION -> Let Id dosPuntos CharAux . igual EXPRESION ptComa

    igual           shift and go to state 83


state 47

    (19) DECLARACION -> Let Id dosPuntos VEC . menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (20) DECLARACION -> Let Id dosPuntos VEC . menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (21) DECLARACION -> Let Id dosPuntos VEC . menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (22) DECLARACION -> Let Id dosPuntos VEC . menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (23) DECLARACION -> Let Id dosPuntos VEC . menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (24) DECLARACION -> Let Id dosPuntos VEC . menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC . menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC . menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC . menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC . menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC . menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC . menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    menorQue        shift and go to state 84


state 48

    (12) DECLARACION -> Let Mut Id igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 85
    INSERTVEC                      shift and go to state 30

state 49

    (13) DECLARACION -> Let Mut Id dosPuntos . I64 igual EXPRESION ptComa
    (14) DECLARACION -> Let Mut Id dosPuntos . F64 igual EXPRESION ptComa
    (15) DECLARACION -> Let Mut Id dosPuntos . StrA igual EXPRESION ptComa
    (16) DECLARACION -> Let Mut Id dosPuntos . Str igual EXPRESION ptComa
    (17) DECLARACION -> Let Mut Id dosPuntos . Bool igual EXPRESION ptComa
    (18) DECLARACION -> Let Mut Id dosPuntos . CharAux igual EXPRESION ptComa
    (31) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos . VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    I64             shift and go to state 86
    F64             shift and go to state 87
    StrA            shift and go to state 88
    Str             shift and go to state 89
    Bool            shift and go to state 90
    CharAux         shift and go to state 91
    VEC             shift and go to state 92


state 50

    (78) EXPRESION -> Id punto . Remove ParA EXPRESION ParC
    (49) INSERTVEC -> Id punto . Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    Remove          shift and go to state 93
    Insert          shift and go to state 38


state 51

    (85) EXPRESION -> Id CorA . EXPRESION CorC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 94
    INSERTVEC                      shift and go to state 30

state 52

    (44) ASIGNACION -> Id igual EXPRESION ptComa .

    Let             reduce using rule 44 (ASIGNACION -> Id igual EXPRESION ptComa .)
    Id              reduce using rule 44 (ASIGNACION -> Id igual EXPRESION ptComa .)
    PrintLn         reduce using rule 44 (ASIGNACION -> Id igual EXPRESION ptComa .)
    $end            reduce using rule 44 (ASIGNACION -> Id igual EXPRESION ptComa .)


state 53

    (55) EXPRESION -> EXPRESION mas . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 95
    INSERTVEC                      shift and go to state 30

state 54

    (56) EXPRESION -> EXPRESION menos . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 96
    INSERTVEC                      shift and go to state 30

state 55

    (57) EXPRESION -> EXPRESION por . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 97
    INSERTVEC                      shift and go to state 30

state 56

    (58) EXPRESION -> EXPRESION dividido . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 98
    INSERTVEC                      shift and go to state 30

state 57

    (59) EXPRESION -> EXPRESION modulo . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 99
    INSERTVEC                      shift and go to state 30

state 58

    (64) EXPRESION -> EXPRESION menorQue . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 100
    INSERTVEC                      shift and go to state 30

state 59

    (65) EXPRESION -> EXPRESION mayorQue . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 101
    INSERTVEC                      shift and go to state 30

state 60

    (66) EXPRESION -> EXPRESION menorIgual . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 102
    INSERTVEC                      shift and go to state 30

state 61

    (67) EXPRESION -> EXPRESION mayorIgual . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 103
    INSERTVEC                      shift and go to state 30

state 62

    (68) EXPRESION -> EXPRESION dobleIgual . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 104
    INSERTVEC                      shift and go to state 30

state 63

    (69) EXPRESION -> EXPRESION diferenteQue . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 105
    INSERTVEC                      shift and go to state 30

state 64

    (70) EXPRESION -> EXPRESION And . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 106
    INSERTVEC                      shift and go to state 30

state 65

    (71) EXPRESION -> EXPRESION Or . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 107
    INSERTVEC                      shift and go to state 30

state 66

    (73) EXPRESION -> EXPRESION AS . I64
    (74) EXPRESION -> EXPRESION AS . F64

    I64             shift and go to state 108
    F64             shift and go to state 109


state 67

    (60) EXPRESION -> menos EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    mas             reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    menos           reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    por             reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    dividido        reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    modulo          reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    menorQue        reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    mayorQue        reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    menorIgual      reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    mayorIgual      reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    dobleIgual      reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    diferenteQue    reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    And             reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    Or              reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    AS              reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    CorC            reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    ParC            reduce using rule 60 (EXPRESION -> menos EXPRESION .)
    Coma            reduce using rule 60 (EXPRESION -> menos EXPRESION .)

  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! por             [ shift and go to state 55 ]
  ! dividido        [ shift and go to state 56 ]
  ! modulo          [ shift and go to state 57 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 68

    (61) EXPRESION -> ParA EXPRESION . ParC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 110
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 69

    (62) EXPRESION -> I64 dosPuntos . dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC

    dosPuntos       shift and go to state 111


state 70

    (63) EXPRESION -> F64 dosPuntos . dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC

    dosPuntos       shift and go to state 112


state 71

    (72) EXPRESION -> not EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 72 (EXPRESION -> not EXPRESION .)
    mas             reduce using rule 72 (EXPRESION -> not EXPRESION .)
    menos           reduce using rule 72 (EXPRESION -> not EXPRESION .)
    por             reduce using rule 72 (EXPRESION -> not EXPRESION .)
    dividido        reduce using rule 72 (EXPRESION -> not EXPRESION .)
    modulo          reduce using rule 72 (EXPRESION -> not EXPRESION .)
    menorQue        reduce using rule 72 (EXPRESION -> not EXPRESION .)
    mayorQue        reduce using rule 72 (EXPRESION -> not EXPRESION .)
    menorIgual      reduce using rule 72 (EXPRESION -> not EXPRESION .)
    mayorIgual      reduce using rule 72 (EXPRESION -> not EXPRESION .)
    dobleIgual      reduce using rule 72 (EXPRESION -> not EXPRESION .)
    diferenteQue    reduce using rule 72 (EXPRESION -> not EXPRESION .)
    And             reduce using rule 72 (EXPRESION -> not EXPRESION .)
    Or              reduce using rule 72 (EXPRESION -> not EXPRESION .)
    AS              reduce using rule 72 (EXPRESION -> not EXPRESION .)
    CorC            reduce using rule 72 (EXPRESION -> not EXPRESION .)
    ParC            reduce using rule 72 (EXPRESION -> not EXPRESION .)
    Coma            reduce using rule 72 (EXPRESION -> not EXPRESION .)

  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! por             [ shift and go to state 55 ]
  ! dividido        [ shift and go to state 56 ]
  ! modulo          [ shift and go to state 57 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 72

    (75) EXPRESION -> vec not . CorA COMASEX CorC
    (76) EXPRESION -> vec not . CorA EXPRESION ptComa EXPRESION CorC

    CorA            shift and go to state 113


state 73

    (45) ASIGNACION -> Id CorA EXPRESION CorC . igual EXPRESION ptComa

    igual           shift and go to state 114


state 74

    (47) PUSH -> Id punto Push ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 115
    INSERTVEC                      shift and go to state 30

state 75

    (49) INSERTVEC -> Id punto Insert ParA . EXPRESION Coma EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 116
    INSERTVEC                      shift and go to state 30

state 76

    (51) IMPRIMIR -> PrintLn not ParA String . ParC ptComa
    (52) IMPRIMIR -> PrintLn not ParA String . Coma COMASEX ParC ptComa

    ParC            shift and go to state 117
    Coma            shift and go to state 118


state 77

    (5) DECLARACION -> Let Id igual EXPRESION ptComa .

    Let             reduce using rule 5 (DECLARACION -> Let Id igual EXPRESION ptComa .)
    Id              reduce using rule 5 (DECLARACION -> Let Id igual EXPRESION ptComa .)
    PrintLn         reduce using rule 5 (DECLARACION -> Let Id igual EXPRESION ptComa .)
    $end            reduce using rule 5 (DECLARACION -> Let Id igual EXPRESION ptComa .)


state 78

    (6) DECLARACION -> Let Id dosPuntos I64 igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 119
    INSERTVEC                      shift and go to state 30

state 79

    (7) DECLARACION -> Let Id dosPuntos F64 igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 120
    INSERTVEC                      shift and go to state 30

state 80

    (8) DECLARACION -> Let Id dosPuntos StrA igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 121
    INSERTVEC                      shift and go to state 30

state 81

    (9) DECLARACION -> Let Id dosPuntos Str igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 122
    INSERTVEC                      shift and go to state 30

state 82

    (10) DECLARACION -> Let Id dosPuntos Bool igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 123
    INSERTVEC                      shift and go to state 30

state 83

    (11) DECLARACION -> Let Id dosPuntos CharAux igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 124
    INSERTVEC                      shift and go to state 30

state 84

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue . I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (20) DECLARACION -> Let Id dosPuntos VEC menorQue . F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (21) DECLARACION -> Let Id dosPuntos VEC menorQue . StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (22) DECLARACION -> Let Id dosPuntos VEC menorQue . Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (23) DECLARACION -> Let Id dosPuntos VEC menorQue . Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (24) DECLARACION -> Let Id dosPuntos VEC menorQue . CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC menorQue . I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC menorQue . F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC menorQue . StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC menorQue . Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC menorQue . Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC menorQue . CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    I64             shift and go to state 125
    F64             shift and go to state 126
    StrA            shift and go to state 127
    Str             shift and go to state 128
    Bool            shift and go to state 129
    CharAux         shift and go to state 130


state 85

    (12) DECLARACION -> Let Mut Id igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 131
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 86

    (13) DECLARACION -> Let Mut Id dosPuntos I64 . igual EXPRESION ptComa

    igual           shift and go to state 132


state 87

    (14) DECLARACION -> Let Mut Id dosPuntos F64 . igual EXPRESION ptComa

    igual           shift and go to state 133


state 88

    (15) DECLARACION -> Let Mut Id dosPuntos StrA . igual EXPRESION ptComa

    igual           shift and go to state 134


state 89

    (16) DECLARACION -> Let Mut Id dosPuntos Str . igual EXPRESION ptComa

    igual           shift and go to state 135


state 90

    (17) DECLARACION -> Let Mut Id dosPuntos Bool . igual EXPRESION ptComa

    igual           shift and go to state 136


state 91

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux . igual EXPRESION ptComa

    igual           shift and go to state 137


state 92

    (31) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC . menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    menorQue        shift and go to state 138


state 93

    (78) EXPRESION -> Id punto Remove . ParA EXPRESION ParC

    ParA            shift and go to state 139


state 94

    (85) EXPRESION -> Id CorA EXPRESION . CorC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    CorC            shift and go to state 140
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 95

    (55) EXPRESION -> EXPRESION mas EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    mas             reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    menos           reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    And             reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    Or              reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    AS              reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    CorC            reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    ParC            reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    Coma            reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63

  ! por             [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! dividido        [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! modulo          [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! menorQue        [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! mayorQue        [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! menorIgual      [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! mayorIgual      [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! dobleIgual      [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! diferenteQue    [ reduce using rule 55 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 96

    (56) EXPRESION -> EXPRESION menos EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    mas             reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    menos           reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    And             reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    Or              reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    AS              reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    CorC            reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    ParC            reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    Coma            reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63

  ! por             [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! dividido        [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! modulo          [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! menorQue        [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! mayorQue        [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! menorIgual      [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! mayorIgual      [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! dobleIgual      [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! diferenteQue    [ reduce using rule 56 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 97

    (57) EXPRESION -> EXPRESION por EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    mas             reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    menos           reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    por             reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    dividido        reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    modulo          reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    menorQue        reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    mayorQue        reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    menorIgual      reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    mayorIgual      reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    dobleIgual      reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    diferenteQue    reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    And             reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    Or              reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    AS              reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    CorC            reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    ParC            reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)
    Coma            reduce using rule 57 (EXPRESION -> EXPRESION por EXPRESION .)

  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! por             [ shift and go to state 55 ]
  ! dividido        [ shift and go to state 56 ]
  ! modulo          [ shift and go to state 57 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 98

    (58) EXPRESION -> EXPRESION dividido EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    mas             reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    menos           reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    por             reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    dividido        reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    modulo          reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    menorQue        reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    mayorQue        reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    menorIgual      reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    mayorIgual      reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    dobleIgual      reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    diferenteQue    reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    And             reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    Or              reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    AS              reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    CorC            reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    ParC            reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)
    Coma            reduce using rule 58 (EXPRESION -> EXPRESION dividido EXPRESION .)

  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! por             [ shift and go to state 55 ]
  ! dividido        [ shift and go to state 56 ]
  ! modulo          [ shift and go to state 57 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 99

    (59) EXPRESION -> EXPRESION modulo EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    mas             reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    menos           reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    por             reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    dividido        reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    modulo          reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    menorQue        reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    mayorQue        reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    menorIgual      reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    mayorIgual      reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    dobleIgual      reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    diferenteQue    reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    And             reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    Or              reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    AS              reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    CorC            reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    ParC            reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)
    Coma            reduce using rule 59 (EXPRESION -> EXPRESION modulo EXPRESION .)

  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! por             [ shift and go to state 55 ]
  ! dividido        [ shift and go to state 56 ]
  ! modulo          [ shift and go to state 57 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 100

    (64) EXPRESION -> EXPRESION menorQue EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    mas             reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    menos           reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    menorQue        reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    mayorQue        reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    menorIgual      reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    mayorIgual      reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    dobleIgual      reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    diferenteQue    reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    And             reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    Or              reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    AS              reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    CorC            reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    ParC            reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    Coma            reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57

  ! por             [ reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .) ]
  ! dividido        [ reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .) ]
  ! modulo          [ reduce using rule 64 (EXPRESION -> EXPRESION menorQue EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 101

    (65) EXPRESION -> EXPRESION mayorQue EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    mas             reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    menos           reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    menorQue        reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    mayorQue        reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    menorIgual      reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    mayorIgual      reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    dobleIgual      reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    diferenteQue    reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    And             reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    Or              reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    AS              reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    CorC            reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    ParC            reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    Coma            reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57

  ! por             [ reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .) ]
  ! dividido        [ reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .) ]
  ! modulo          [ reduce using rule 65 (EXPRESION -> EXPRESION mayorQue EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 102

    (66) EXPRESION -> EXPRESION menorIgual EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    mas             reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    menos           reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    menorQue        reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    mayorQue        reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    menorIgual      reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    mayorIgual      reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    dobleIgual      reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    diferenteQue    reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    And             reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    Or              reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    AS              reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    CorC            reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    ParC            reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    Coma            reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57

  ! por             [ reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .) ]
  ! dividido        [ reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .) ]
  ! modulo          [ reduce using rule 66 (EXPRESION -> EXPRESION menorIgual EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 103

    (67) EXPRESION -> EXPRESION mayorIgual EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    mas             reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    menos           reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    menorQue        reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    mayorQue        reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    menorIgual      reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    mayorIgual      reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    dobleIgual      reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    diferenteQue    reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    And             reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    Or              reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    AS              reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    CorC            reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    ParC            reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    Coma            reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57

  ! por             [ reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .) ]
  ! dividido        [ reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .) ]
  ! modulo          [ reduce using rule 67 (EXPRESION -> EXPRESION mayorIgual EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 104

    (68) EXPRESION -> EXPRESION dobleIgual EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    mas             reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    menos           reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    menorQue        reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    mayorQue        reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    menorIgual      reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    mayorIgual      reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    dobleIgual      reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    diferenteQue    reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    And             reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    Or              reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    AS              reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    CorC            reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    ParC            reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    Coma            reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57

  ! por             [ reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .) ]
  ! dividido        [ reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .) ]
  ! modulo          [ reduce using rule 68 (EXPRESION -> EXPRESION dobleIgual EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 105

    (69) EXPRESION -> EXPRESION diferenteQue EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    mas             reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    menos           reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    menorQue        reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    mayorQue        reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    menorIgual      reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    mayorIgual      reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    dobleIgual      reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    diferenteQue    reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    And             reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    Or              reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    AS              reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    CorC            reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    ParC            reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    Coma            reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .)
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57

  ! por             [ reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .) ]
  ! dividido        [ reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .) ]
  ! modulo          [ reduce using rule 69 (EXPRESION -> EXPRESION diferenteQue EXPRESION .) ]
  ! mas             [ shift and go to state 53 ]
  ! menos           [ shift and go to state 54 ]
  ! menorQue        [ shift and go to state 58 ]
  ! mayorQue        [ shift and go to state 59 ]
  ! menorIgual      [ shift and go to state 60 ]
  ! mayorIgual      [ shift and go to state 61 ]
  ! dobleIgual      [ shift and go to state 62 ]
  ! diferenteQue    [ shift and go to state 63 ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 106

    (70) EXPRESION -> EXPRESION And EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .)
    And             reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .)
    Or              reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .)
    AS              reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .)
    CorC            reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .)
    ParC            reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .)
    Coma            reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .)
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63

  ! mas             [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! menos           [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! por             [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! dividido        [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! modulo          [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! menorQue        [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! mayorQue        [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! menorIgual      [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! mayorIgual      [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! dobleIgual      [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! diferenteQue    [ reduce using rule 70 (EXPRESION -> EXPRESION And EXPRESION .) ]
  ! And             [ shift and go to state 64 ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 107

    (71) EXPRESION -> EXPRESION Or EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .)
    Or              reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .)
    AS              reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .)
    CorC            reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .)
    ParC            reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .)
    Coma            reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .)
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64

  ! mas             [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! menos           [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! por             [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! dividido        [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! modulo          [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! menorQue        [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! mayorQue        [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! menorIgual      [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! mayorIgual      [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! dobleIgual      [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! diferenteQue    [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! And             [ reduce using rule 71 (EXPRESION -> EXPRESION Or EXPRESION .) ]
  ! Or              [ shift and go to state 65 ]
  ! AS              [ shift and go to state 66 ]


state 108

    (73) EXPRESION -> EXPRESION AS I64 .

    ptComa          reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    mas             reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    menos           reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    por             reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    dividido        reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    modulo          reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    menorQue        reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    mayorQue        reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    menorIgual      reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    mayorIgual      reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    dobleIgual      reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    diferenteQue    reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    And             reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    Or              reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    AS              reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    CorC            reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    ParC            reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)
    Coma            reduce using rule 73 (EXPRESION -> EXPRESION AS I64 .)


state 109

    (74) EXPRESION -> EXPRESION AS F64 .

    ptComa          reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    mas             reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    menos           reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    por             reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    dividido        reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    modulo          reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    menorQue        reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    mayorQue        reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    menorIgual      reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    mayorIgual      reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    dobleIgual      reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    diferenteQue    reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    And             reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    Or              reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    AS              reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    CorC            reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    ParC            reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)
    Coma            reduce using rule 74 (EXPRESION -> EXPRESION AS F64 .)


state 110

    (61) EXPRESION -> ParA EXPRESION ParC .

    ptComa          reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    mas             reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    menos           reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    por             reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    dividido        reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    modulo          reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    menorQue        reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    mayorQue        reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    menorIgual      reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    mayorIgual      reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    dobleIgual      reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    diferenteQue    reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    And             reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    Or              reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    AS              reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    CorC            reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    ParC            reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)
    Coma            reduce using rule 61 (EXPRESION -> ParA EXPRESION ParC .)


state 111

    (62) EXPRESION -> I64 dosPuntos dosPuntos . Powi ParA EXPRESION Coma EXPRESION ParC

    Powi            shift and go to state 141


state 112

    (63) EXPRESION -> F64 dosPuntos dosPuntos . Powf ParA EXPRESION Coma EXPRESION ParC

    Powf            shift and go to state 142


state 113

    (75) EXPRESION -> vec not CorA . COMASEX CorC
    (76) EXPRESION -> vec not CorA . EXPRESION ptComa EXPRESION CorC
    (53) COMASEX -> . COMASEX Coma EXPRESION
    (54) COMASEX -> . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    COMASEX                        shift and go to state 143
    EXPRESION                      shift and go to state 144
    INSERTVEC                      shift and go to state 30

state 114

    (45) ASIGNACION -> Id CorA EXPRESION CorC igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 145
    INSERTVEC                      shift and go to state 30

state 115

    (47) PUSH -> Id punto Push ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 146
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 116

    (49) INSERTVEC -> Id punto Insert ParA EXPRESION . Coma EXPRESION ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    Coma            shift and go to state 147
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 117

    (51) IMPRIMIR -> PrintLn not ParA String ParC . ptComa

    ptComa          shift and go to state 148


state 118

    (52) IMPRIMIR -> PrintLn not ParA String Coma . COMASEX ParC ptComa
    (53) COMASEX -> . COMASEX Coma EXPRESION
    (54) COMASEX -> . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    COMASEX                        shift and go to state 149
    EXPRESION                      shift and go to state 150
    INSERTVEC                      shift and go to state 30

state 119

    (6) DECLARACION -> Let Id dosPuntos I64 igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 151
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 120

    (7) DECLARACION -> Let Id dosPuntos F64 igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 152
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 121

    (8) DECLARACION -> Let Id dosPuntos StrA igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 153
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 122

    (9) DECLARACION -> Let Id dosPuntos Str igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 154
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 123

    (10) DECLARACION -> Let Id dosPuntos Bool igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 155
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 124

    (11) DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 156
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 125

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 157


state 126

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 158


state 127

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 159


state 128

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 160


state 129

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 161


state 130

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 162


state 131

    (12) DECLARACION -> Let Mut Id igual EXPRESION ptComa .

    Let             reduce using rule 12 (DECLARACION -> Let Mut Id igual EXPRESION ptComa .)
    Id              reduce using rule 12 (DECLARACION -> Let Mut Id igual EXPRESION ptComa .)
    PrintLn         reduce using rule 12 (DECLARACION -> Let Mut Id igual EXPRESION ptComa .)
    $end            reduce using rule 12 (DECLARACION -> Let Mut Id igual EXPRESION ptComa .)


state 132

    (13) DECLARACION -> Let Mut Id dosPuntos I64 igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 163
    INSERTVEC                      shift and go to state 30

state 133

    (14) DECLARACION -> Let Mut Id dosPuntos F64 igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 164
    INSERTVEC                      shift and go to state 30

state 134

    (15) DECLARACION -> Let Mut Id dosPuntos StrA igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 165
    INSERTVEC                      shift and go to state 30

state 135

    (16) DECLARACION -> Let Mut Id dosPuntos Str igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 166
    INSERTVEC                      shift and go to state 30

state 136

    (17) DECLARACION -> Let Mut Id dosPuntos Bool igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 167
    INSERTVEC                      shift and go to state 30

state 137

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux igual . EXPRESION ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 168
    INSERTVEC                      shift and go to state 30

state 138

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue . CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    I64             shift and go to state 169
    F64             shift and go to state 170
    StrA            shift and go to state 171
    Str             shift and go to state 172
    Bool            shift and go to state 173
    CharAux         shift and go to state 174


state 139

    (78) EXPRESION -> Id punto Remove ParA . EXPRESION ParC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 175
    INSERTVEC                      shift and go to state 30

state 140

    (85) EXPRESION -> Id CorA EXPRESION CorC .

    ptComa          reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    mas             reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    menos           reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    por             reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    dividido        reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    modulo          reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    menorQue        reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    mayorQue        reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    menorIgual      reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    mayorIgual      reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    dobleIgual      reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    diferenteQue    reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    And             reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    Or              reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    AS              reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    CorC            reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    ParC            reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)
    Coma            reduce using rule 85 (EXPRESION -> Id CorA EXPRESION CorC .)


state 141

    (62) EXPRESION -> I64 dosPuntos dosPuntos Powi . ParA EXPRESION Coma EXPRESION ParC

    ParA            shift and go to state 176


state 142

    (63) EXPRESION -> F64 dosPuntos dosPuntos Powf . ParA EXPRESION Coma EXPRESION ParC

    ParA            shift and go to state 177


state 143

    (75) EXPRESION -> vec not CorA COMASEX . CorC
    (53) COMASEX -> COMASEX . Coma EXPRESION

    CorC            shift and go to state 178
    Coma            shift and go to state 179


state 144

    (76) EXPRESION -> vec not CorA EXPRESION . ptComa EXPRESION CorC
    (54) COMASEX -> EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 180
    CorC            reduce using rule 54 (COMASEX -> EXPRESION .)
    Coma            reduce using rule 54 (COMASEX -> EXPRESION .)
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 145

    (45) ASIGNACION -> Id CorA EXPRESION CorC igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 181
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 146

    (47) PUSH -> Id punto Push ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 182


state 147

    (49) INSERTVEC -> Id punto Insert ParA EXPRESION Coma . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 183
    INSERTVEC                      shift and go to state 30

state 148

    (51) IMPRIMIR -> PrintLn not ParA String ParC ptComa .

    Let             reduce using rule 51 (IMPRIMIR -> PrintLn not ParA String ParC ptComa .)
    Id              reduce using rule 51 (IMPRIMIR -> PrintLn not ParA String ParC ptComa .)
    PrintLn         reduce using rule 51 (IMPRIMIR -> PrintLn not ParA String ParC ptComa .)
    $end            reduce using rule 51 (IMPRIMIR -> PrintLn not ParA String ParC ptComa .)


state 149

    (52) IMPRIMIR -> PrintLn not ParA String Coma COMASEX . ParC ptComa
    (53) COMASEX -> COMASEX . Coma EXPRESION

    ParC            shift and go to state 184
    Coma            shift and go to state 179


state 150

    (54) COMASEX -> EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            reduce using rule 54 (COMASEX -> EXPRESION .)
    Coma            reduce using rule 54 (COMASEX -> EXPRESION .)
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 151

    (6) DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .

    Let             reduce using rule 6 (DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .)
    Id              reduce using rule 6 (DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .)
    PrintLn         reduce using rule 6 (DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .)
    $end            reduce using rule 6 (DECLARACION -> Let Id dosPuntos I64 igual EXPRESION ptComa .)


state 152

    (7) DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .

    Let             reduce using rule 7 (DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .)
    Id              reduce using rule 7 (DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .)
    PrintLn         reduce using rule 7 (DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .)
    $end            reduce using rule 7 (DECLARACION -> Let Id dosPuntos F64 igual EXPRESION ptComa .)


state 153

    (8) DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .

    Let             reduce using rule 8 (DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .)
    Id              reduce using rule 8 (DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .)
    PrintLn         reduce using rule 8 (DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .)
    $end            reduce using rule 8 (DECLARACION -> Let Id dosPuntos StrA igual EXPRESION ptComa .)


state 154

    (9) DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .

    Let             reduce using rule 9 (DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .)
    Id              reduce using rule 9 (DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .)
    PrintLn         reduce using rule 9 (DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .)
    $end            reduce using rule 9 (DECLARACION -> Let Id dosPuntos Str igual EXPRESION ptComa .)


state 155

    (10) DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .

    Let             reduce using rule 10 (DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .)
    Id              reduce using rule 10 (DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .)
    PrintLn         reduce using rule 10 (DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .)
    $end            reduce using rule 10 (DECLARACION -> Let Id dosPuntos Bool igual EXPRESION ptComa .)


state 156

    (11) DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .

    Let             reduce using rule 11 (DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .)
    Id              reduce using rule 11 (DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .)
    PrintLn         reduce using rule 11 (DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .)
    $end            reduce using rule 11 (DECLARACION -> Let Id dosPuntos CharAux igual EXPRESION ptComa .)


state 157

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 185


state 158

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 186


state 159

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 187


state 160

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 188


state 161

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 189


state 162

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 190


state 163

    (13) DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 191
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 164

    (14) DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 192
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 165

    (15) DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 193
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 166

    (16) DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 194
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 167

    (17) DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 195
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 168

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION . ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ptComa          shift and go to state 196
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 169

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 197


state 170

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 198


state 171

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 199


state 172

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 200


state 173

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 201


state 174

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux . mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux . mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    mayorQue        shift and go to state 202


state 175

    (78) EXPRESION -> Id punto Remove ParA EXPRESION . ParC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 203
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 176

    (62) EXPRESION -> I64 dosPuntos dosPuntos Powi ParA . EXPRESION Coma EXPRESION ParC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 204
    INSERTVEC                      shift and go to state 30

state 177

    (63) EXPRESION -> F64 dosPuntos dosPuntos Powf ParA . EXPRESION Coma EXPRESION ParC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 205
    INSERTVEC                      shift and go to state 30

state 178

    (75) EXPRESION -> vec not CorA COMASEX CorC .

    ptComa          reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    mas             reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    menos           reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    por             reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    dividido        reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    modulo          reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    menorQue        reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    mayorQue        reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    menorIgual      reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    mayorIgual      reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    dobleIgual      reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    diferenteQue    reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    And             reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    Or              reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    AS              reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    CorC            reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    ParC            reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)
    Coma            reduce using rule 75 (EXPRESION -> vec not CorA COMASEX CorC .)


state 179

    (53) COMASEX -> COMASEX Coma . EXPRESION
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 206
    INSERTVEC                      shift and go to state 30

state 180

    (76) EXPRESION -> vec not CorA EXPRESION ptComa . EXPRESION CorC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 207
    INSERTVEC                      shift and go to state 30

state 181

    (45) ASIGNACION -> Id CorA EXPRESION CorC igual EXPRESION ptComa .

    Let             reduce using rule 45 (ASIGNACION -> Id CorA EXPRESION CorC igual EXPRESION ptComa .)
    Id              reduce using rule 45 (ASIGNACION -> Id CorA EXPRESION CorC igual EXPRESION ptComa .)
    PrintLn         reduce using rule 45 (ASIGNACION -> Id CorA EXPRESION CorC igual EXPRESION ptComa .)
    $end            reduce using rule 45 (ASIGNACION -> Id CorA EXPRESION CorC igual EXPRESION ptComa .)


state 182

    (47) PUSH -> Id punto Push ParA EXPRESION ParC ptComa .

    Let             reduce using rule 47 (PUSH -> Id punto Push ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 47 (PUSH -> Id punto Push ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 47 (PUSH -> Id punto Push ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 47 (PUSH -> Id punto Push ParA EXPRESION ParC ptComa .)


state 183

    (49) INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 208
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 184

    (52) IMPRIMIR -> PrintLn not ParA String Coma COMASEX ParC . ptComa

    ptComa          shift and go to state 209


state 185

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 210


state 186

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 211


state 187

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 212


state 188

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 213


state 189

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 214


state 190

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 215


state 191

    (13) DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .

    Let             reduce using rule 13 (DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .)
    Id              reduce using rule 13 (DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .)
    PrintLn         reduce using rule 13 (DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .)
    $end            reduce using rule 13 (DECLARACION -> Let Mut Id dosPuntos I64 igual EXPRESION ptComa .)


state 192

    (14) DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .

    Let             reduce using rule 14 (DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .)
    Id              reduce using rule 14 (DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .)
    PrintLn         reduce using rule 14 (DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .)
    $end            reduce using rule 14 (DECLARACION -> Let Mut Id dosPuntos F64 igual EXPRESION ptComa .)


state 193

    (15) DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .

    Let             reduce using rule 15 (DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .)
    Id              reduce using rule 15 (DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .)
    PrintLn         reduce using rule 15 (DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .)
    $end            reduce using rule 15 (DECLARACION -> Let Mut Id dosPuntos StrA igual EXPRESION ptComa .)


state 194

    (16) DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .

    Let             reduce using rule 16 (DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .)
    Id              reduce using rule 16 (DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .)
    PrintLn         reduce using rule 16 (DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .)
    $end            reduce using rule 16 (DECLARACION -> Let Mut Id dosPuntos Str igual EXPRESION ptComa .)


state 195

    (17) DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .

    Let             reduce using rule 17 (DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .)
    Id              reduce using rule 17 (DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .)
    PrintLn         reduce using rule 17 (DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .)
    $end            reduce using rule 17 (DECLARACION -> Let Mut Id dosPuntos Bool igual EXPRESION ptComa .)


state 196

    (18) DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .

    Let             reduce using rule 18 (DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .)
    Id              reduce using rule 18 (DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .)
    PrintLn         reduce using rule 18 (DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .)
    $end            reduce using rule 18 (DECLARACION -> Let Mut Id dosPuntos CharAux igual EXPRESION ptComa .)


state 197

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 216


state 198

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 217


state 199

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 218


state 200

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 219


state 201

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 220


state 202

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue . igual VEC dosPuntos dosPuntos New ParA ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue . igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    igual           shift and go to state 221


state 203

    (78) EXPRESION -> Id punto Remove ParA EXPRESION ParC .

    ptComa          reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    mas             reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    menos           reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    por             reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    dividido        reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    modulo          reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    menorQue        reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    mayorQue        reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    menorIgual      reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    mayorIgual      reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    dobleIgual      reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    diferenteQue    reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    And             reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    Or              reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    AS              reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    CorC            reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    ParC            reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)
    Coma            reduce using rule 78 (EXPRESION -> Id punto Remove ParA EXPRESION ParC .)


state 204

    (62) EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION . Coma EXPRESION ParC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    Coma            shift and go to state 222
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 205

    (63) EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION . Coma EXPRESION ParC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    Coma            shift and go to state 223
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 206

    (53) COMASEX -> COMASEX Coma EXPRESION .
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    CorC            reduce using rule 53 (COMASEX -> COMASEX Coma EXPRESION .)
    Coma            reduce using rule 53 (COMASEX -> COMASEX Coma EXPRESION .)
    ParC            reduce using rule 53 (COMASEX -> COMASEX Coma EXPRESION .)
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 207

    (76) EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION . CorC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    CorC            shift and go to state 224
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 208

    (49) INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC . ptComa

    ptComa          shift and go to state 225


state 209

    (52) IMPRIMIR -> PrintLn not ParA String Coma COMASEX ParC ptComa .

    Let             reduce using rule 52 (IMPRIMIR -> PrintLn not ParA String Coma COMASEX ParC ptComa .)
    Id              reduce using rule 52 (IMPRIMIR -> PrintLn not ParA String Coma COMASEX ParC ptComa .)
    PrintLn         reduce using rule 52 (IMPRIMIR -> PrintLn not ParA String Coma COMASEX ParC ptComa .)
    $end            reduce using rule 52 (IMPRIMIR -> PrintLn not ParA String Coma COMASEX ParC ptComa .)


state 210

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 226


state 211

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 227


state 212

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 228


state 213

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 229


state 214

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 230


state 215

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 231


state 216

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 232


state 217

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 233


state 218

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 234


state 219

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 235


state 220

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 236


state 221

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual . VEC dosPuntos dosPuntos New ParA ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual . VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    VEC             shift and go to state 237


state 222

    (62) EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma . EXPRESION ParC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 238
    INSERTVEC                      shift and go to state 30

state 223

    (63) EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma . EXPRESION ParC
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 239
    INSERTVEC                      shift and go to state 30

state 224

    (76) EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .

    ptComa          reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    mas             reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    menos           reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    por             reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    dividido        reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    modulo          reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    menorQue        reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    mayorQue        reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    menorIgual      reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    mayorIgual      reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    dobleIgual      reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    diferenteQue    reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    And             reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    Or              reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    AS              reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    CorC            reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    ParC            reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)
    Coma            reduce using rule 76 (EXPRESION -> vec not CorA EXPRESION ptComa EXPRESION CorC .)


state 225

    (49) INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .

    Let             reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    Id              reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    $end            reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    ptComa          reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    mas             reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    menos           reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    por             reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    dividido        reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    modulo          reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    menorQue        reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    mayorQue        reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    menorIgual      reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    mayorIgual      reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    dobleIgual      reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    diferenteQue    reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    And             reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    Or              reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    AS              reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    CorC            reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    ParC            reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)
    Coma            reduce using rule 49 (INSERTVEC -> Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa .)


state 226

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 240


state 227

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 241


state 228

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 242


state 229

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 243


state 230

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 244


state 231

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 245


state 232

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 246


state 233

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 247


state 234

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 248


state 235

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 249


state 236

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 250


state 237

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC . dosPuntos dosPuntos New ParA ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC . dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 251


state 238

    (62) EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION . ParC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 252
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 239

    (63) EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION . ParC
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 253
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 240

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 254
    Capacidad       shift and go to state 255


state 241

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 256
    Capacidad       shift and go to state 257


state 242

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 258
    Capacidad       shift and go to state 259


state 243

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 260
    Capacidad       shift and go to state 261


state 244

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 262
    Capacidad       shift and go to state 263


state 245

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 264
    Capacidad       shift and go to state 265


state 246

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 266


state 247

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 267


state 248

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 268


state 249

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 269


state 250

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 270


state 251

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos . dosPuntos New ParA ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos . dosPuntos Capacidad ParA EXPRESION ParC ptComa

    dosPuntos       shift and go to state 271


state 252

    (62) EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .

    ptComa          reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    mas             reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    menos           reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    por             reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    dividido        reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    modulo          reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    menorQue        reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    mayorQue        reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    menorIgual      reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    mayorIgual      reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    dobleIgual      reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    diferenteQue    reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    And             reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    Or              reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    AS              reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    CorC            reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    ParC            reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)
    Coma            reduce using rule 62 (EXPRESION -> I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC .)


state 253

    (63) EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .

    ptComa          reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    mas             reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    menos           reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    por             reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    dividido        reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    modulo          reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    menorQue        reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    mayorQue        reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    menorIgual      reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    mayorIgual      reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    dobleIgual      reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    diferenteQue    reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    And             reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    Or              reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    AS              reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    CorC            reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    ParC            reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)
    Coma            reduce using rule 63 (EXPRESION -> F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC .)


state 254

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 272


state 255

    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 273


state 256

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 274


state 257

    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 275


state 258

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 276


state 259

    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 277


state 260

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 278


state 261

    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 279


state 262

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 280


state 263

    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 281


state 264

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 282


state 265

    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 283


state 266

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 284
    Capacidad       shift and go to state 285


state 267

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 286
    Capacidad       shift and go to state 287


state 268

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 288
    Capacidad       shift and go to state 289


state 269

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 290
    Capacidad       shift and go to state 291


state 270

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 292
    Capacidad       shift and go to state 293


state 271

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos . New ParA ParC ptComa
    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos . Capacidad ParA EXPRESION ParC ptComa

    New             shift and go to state 294
    Capacidad       shift and go to state 295


state 272

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 296


state 273

    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 297
    INSERTVEC                      shift and go to state 30

state 274

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 298


state 275

    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 299
    INSERTVEC                      shift and go to state 30

state 276

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 300


state 277

    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 301
    INSERTVEC                      shift and go to state 30

state 278

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 302


state 279

    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 303
    INSERTVEC                      shift and go to state 30

state 280

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 304


state 281

    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 305
    INSERTVEC                      shift and go to state 30

state 282

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 306


state 283

    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 307
    INSERTVEC                      shift and go to state 30

state 284

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 308


state 285

    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 309


state 286

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 310


state 287

    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 311


state 288

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 312


state 289

    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 313


state 290

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 314


state 291

    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 315


state 292

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 316


state 293

    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 317


state 294

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New . ParA ParC ptComa

    ParA            shift and go to state 318


state 295

    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad . ParA EXPRESION ParC ptComa

    ParA            shift and go to state 319


state 296

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 320


state 297

    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 321
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 298

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 322


state 299

    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 323
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 300

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 324


state 301

    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 325
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 302

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 326


state 303

    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 327
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 304

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 328


state 305

    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 329
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 306

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 330


state 307

    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 331
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 308

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 332


state 309

    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 333
    INSERTVEC                      shift and go to state 30

state 310

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 334


state 311

    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 335
    INSERTVEC                      shift and go to state 30

state 312

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 336


state 313

    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 337
    INSERTVEC                      shift and go to state 30

state 314

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 338


state 315

    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 339
    INSERTVEC                      shift and go to state 30

state 316

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 340


state 317

    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 341
    INSERTVEC                      shift and go to state 30

state 318

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA . ParC ptComa

    ParC            shift and go to state 342


state 319

    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA . EXPRESION ParC ptComa
    (55) EXPRESION -> . EXPRESION mas EXPRESION
    (56) EXPRESION -> . EXPRESION menos EXPRESION
    (57) EXPRESION -> . EXPRESION por EXPRESION
    (58) EXPRESION -> . EXPRESION dividido EXPRESION
    (59) EXPRESION -> . EXPRESION modulo EXPRESION
    (60) EXPRESION -> . menos EXPRESION
    (61) EXPRESION -> . ParA EXPRESION ParC
    (62) EXPRESION -> . I64 dosPuntos dosPuntos Powi ParA EXPRESION Coma EXPRESION ParC
    (63) EXPRESION -> . F64 dosPuntos dosPuntos Powf ParA EXPRESION Coma EXPRESION ParC
    (64) EXPRESION -> . EXPRESION menorQue EXPRESION
    (65) EXPRESION -> . EXPRESION mayorQue EXPRESION
    (66) EXPRESION -> . EXPRESION menorIgual EXPRESION
    (67) EXPRESION -> . EXPRESION mayorIgual EXPRESION
    (68) EXPRESION -> . EXPRESION dobleIgual EXPRESION
    (69) EXPRESION -> . EXPRESION diferenteQue EXPRESION
    (70) EXPRESION -> . EXPRESION And EXPRESION
    (71) EXPRESION -> . EXPRESION Or EXPRESION
    (72) EXPRESION -> . not EXPRESION
    (73) EXPRESION -> . EXPRESION AS I64
    (74) EXPRESION -> . EXPRESION AS F64
    (75) EXPRESION -> . vec not CorA COMASEX CorC
    (76) EXPRESION -> . vec not CorA EXPRESION ptComa EXPRESION CorC
    (77) EXPRESION -> . INSERTVEC
    (78) EXPRESION -> . Id punto Remove ParA EXPRESION ParC
    (79) EXPRESION -> . Float
    (80) EXPRESION -> . Entero
    (81) EXPRESION -> . Booleano
    (82) EXPRESION -> . String
    (83) EXPRESION -> . Char
    (84) EXPRESION -> . Id
    (85) EXPRESION -> . Id CorA EXPRESION CorC
    (49) INSERTVEC -> . Id punto Insert ParA EXPRESION Coma EXPRESION ParC ptComa

    menos           shift and go to state 24
    ParA            shift and go to state 25
    I64             shift and go to state 26
    F64             shift and go to state 27
    not             shift and go to state 28
    vec             shift and go to state 29
    Id              shift and go to state 22
    Float           shift and go to state 31
    Entero          shift and go to state 32
    Booleano        shift and go to state 33
    String          shift and go to state 34
    Char            shift and go to state 35

    EXPRESION                      shift and go to state 343
    INSERTVEC                      shift and go to state 30

state 320

    (19) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 19 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 19 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 19 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 19 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 321

    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 344


state 322

    (20) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 20 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 20 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 20 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 20 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 323

    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 345


state 324

    (21) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 21 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 21 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 21 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 21 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 325

    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 346


state 326

    (22) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 22 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 22 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 22 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 22 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 327

    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 347


state 328

    (23) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 23 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 23 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 23 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 23 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 329

    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 348


state 330

    (24) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 24 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 24 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 24 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 24 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 331

    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 349


state 332

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 350


state 333

    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 351
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 334

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 352


state 335

    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 353
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 336

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 354


state 337

    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 355
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 338

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 356


state 339

    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 357
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 340

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 358


state 341

    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 359
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 342

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC . ptComa

    ptComa          shift and go to state 360


state 343

    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION . ParC ptComa
    (55) EXPRESION -> EXPRESION . mas EXPRESION
    (56) EXPRESION -> EXPRESION . menos EXPRESION
    (57) EXPRESION -> EXPRESION . por EXPRESION
    (58) EXPRESION -> EXPRESION . dividido EXPRESION
    (59) EXPRESION -> EXPRESION . modulo EXPRESION
    (64) EXPRESION -> EXPRESION . menorQue EXPRESION
    (65) EXPRESION -> EXPRESION . mayorQue EXPRESION
    (66) EXPRESION -> EXPRESION . menorIgual EXPRESION
    (67) EXPRESION -> EXPRESION . mayorIgual EXPRESION
    (68) EXPRESION -> EXPRESION . dobleIgual EXPRESION
    (69) EXPRESION -> EXPRESION . diferenteQue EXPRESION
    (70) EXPRESION -> EXPRESION . And EXPRESION
    (71) EXPRESION -> EXPRESION . Or EXPRESION
    (73) EXPRESION -> EXPRESION . AS I64
    (74) EXPRESION -> EXPRESION . AS F64

    ParC            shift and go to state 361
    mas             shift and go to state 53
    menos           shift and go to state 54
    por             shift and go to state 55
    dividido        shift and go to state 56
    modulo          shift and go to state 57
    menorQue        shift and go to state 58
    mayorQue        shift and go to state 59
    menorIgual      shift and go to state 60
    mayorIgual      shift and go to state 61
    dobleIgual      shift and go to state 62
    diferenteQue    shift and go to state 63
    And             shift and go to state 64
    Or              shift and go to state 65
    AS              shift and go to state 66


state 344

    (25) DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 25 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 25 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 25 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 25 (DECLARACION -> Let Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 345

    (26) DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 26 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 26 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 26 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 26 (DECLARACION -> Let Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 346

    (27) DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 27 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 27 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 27 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 27 (DECLARACION -> Let Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 347

    (28) DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 28 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 28 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 28 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 28 (DECLARACION -> Let Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 348

    (29) DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 29 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 29 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 29 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 29 (DECLARACION -> Let Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 349

    (30) DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 30 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 30 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 30 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 30 (DECLARACION -> Let Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 350

    (31) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 31 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 31 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 31 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 31 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 351

    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 362


state 352

    (32) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 32 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 32 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 32 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 32 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 353

    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 363


state 354

    (33) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 33 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 33 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 33 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 33 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 355

    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 364


state 356

    (34) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 34 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 34 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 34 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 34 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 357

    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 365


state 358

    (35) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 35 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 35 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 35 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 35 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 359

    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 366


state 360

    (36) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .

    Let             reduce using rule 36 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    Id              reduce using rule 36 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    PrintLn         reduce using rule 36 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)
    $end            reduce using rule 36 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos New ParA ParC ptComa .)


state 361

    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC . ptComa

    ptComa          shift and go to state 367


state 362

    (37) DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 37 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 37 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 37 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 37 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue I64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 363

    (38) DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 38 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 38 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 38 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 38 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue F64 mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 364

    (39) DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 39 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 39 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 39 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 39 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue StrA mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 365

    (40) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 40 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 40 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 40 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 40 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Str mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 366

    (41) DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 41 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 41 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 41 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 41 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue Bool mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)


state 367

    (42) DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .

    Let             reduce using rule 42 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    Id              reduce using rule 42 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    PrintLn         reduce using rule 42 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)
    $end            reduce using rule 42 (DECLARACION -> Let Mut Id dosPuntos VEC menorQue CharAux mayorQue igual VEC dosPuntos dosPuntos Capacidad ParA EXPRESION ParC ptComa .)

